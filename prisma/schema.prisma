// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  auth0Id String? @unique
  email String @unique
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdConcepts Concept[] @relation("CreatedConcepts")
  purchasedConcepts Concept[] @relation("PurchasedConcepts")
  likedProducts ProductLike[]
  cart Cart? 
}
model Image{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fileName String
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Concept {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  thumbnail String? @default("")
  images String[]
  description String
  style  Style
  price  Float?
  type Type
  createdByAuth0Id String
  createdBy User? @relation("CreatedConcepts", fields: [createdByAuth0Id], references: [auth0Id])
  purchasedByAuth0Id String?
  purchasedBy User? @relation("PurchasedConcepts", fields: [purchasedByAuth0Id], references: [auth0Id])
  status Status @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  conceptProducts ConceptProduct[]
  cartItems CartItem[]
}

model ConceptProduct{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  conceptId String @db.ObjectId
  productId String @db.ObjectId
  concept Concept @relation(fields: [conceptId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  @@unique([conceptId, productId])
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userAuth0Id String @unique
  user User @relation(fields: [userAuth0Id], references: [auth0Id], onDelete: Cascade) 
  cartItems CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  cartId String @db.ObjectId
  conceptId String @db.ObjectId
  cart Cart @relation(fields: [cartId], references: [id])
  concept Concept @relation(fields: [conceptId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  image String
  thumbnail String
  description String
  category String
  price Float?
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  conceptProducts ConceptProduct[]
  partnerProducts PartnerProduct[]
  likes ProductLike[]
}

model PartnerProduct{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  partnerId String @db.ObjectId
  productId String @db.ObjectId
  partner Partner @relation(fields: [partnerId],references: [id])
  product Product @relation(fields: [productId],references: [id])
  @@unique([partnerId, productId])
}

model Partner {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  partnerProducts PartnerProduct[]
}

model ProductLike {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userAuth0Id String @unique
  productId String @db.ObjectId
  product  Product @relation(fields: [productId], references: [id])
  user     User @relation(fields: [userAuth0Id], references: [auth0Id])
  @@unique([userAuth0Id, productId])
}

model Transaction{ 
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  paymentId      String
  payerId        String
  state          String
  amount         Int
  currency       String
  description    String
  paymentMethod  String
  payerEmail     String
  payerFirstName String
  payerLastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  }

enum Role {
  ADMIN
  USER
  PARTNER
}

enum Style {
  MINIMALIST
  MODERN
  INDUSTRIAL
  SCANDINAVIAN
  CONTEMPORARY
  MIDCENTURY
  ARTDECO
  TRADITIONAL
  BOHEMIAN
  ECLECTIC
  CLASSIC
}
enum Status {
  DRAFT
  PUBLISHED
}

enum Type {
KITCHEN
LIVINGROOM
BEDROOM
DININGROOM
BATHROOM
OFFICE
STUDY
ENTRYWAY
LIBRARY
NURSERY
KIDSROOM
}

